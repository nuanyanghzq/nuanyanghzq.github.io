<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为什么springboot项目不需要xml配置之springbootApplication</title>
      <link href="/2019/11/15/springbootApplication/"/>
      <url>/2019/11/15/springbootApplication/</url>
      
        <content type="html"><![CDATA[<h1 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h1><p>先看导入的依赖逐步分析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击进去发现他的父项目是 dependencies</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring‐boot‐dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dependencies管理所有的依赖版本<br><img alt data-src="/img/springbootFile/springbootAppcotion.png" class="lazyload"><br>上面控制了各个版本 俗称:版本控制 以后导入pom依赖默认是不需要写版本号的（如果没有在dependencies里面还是需要版本号的）</p><h2 id="导入的依赖（由谁来导入jar包）"><a href="#导入的依赖（由谁来导入jar包）" class="headerlink" title="导入的依赖（由谁来导入jar包）"></a>导入的依赖（由谁来导入jar包）</h2><p>spring-boot-starter：spring-boot场景启动器<br>spring-boot-starter-：有很多的模块运行所依赖的组件<br>比如：<br>spring-boot-starter-web：帮我们导入了web模块正常运行所依赖的组件；<br>spring-boot-starter-aop aop切面所需要的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），</span><br><span class="line">只需要在项目里面引入这些starter 相关场景的所有依赖都会导入进来。要用什</span><br><span class="line">么功能就导入什么场景的启动器</span><br></pre></td></tr></table></figure><h1 id="springboot为什么不需要xml配置了"><a href="#springboot为什么不需要xml配置了" class="headerlink" title="springboot为什么不需要xml配置了"></a>springboot为什么不需要xml配置了</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;           <span class="comment">// Spring应用启动起来         </span></span><br><span class="line">    SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;    </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootApplication</strong>: Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot 就应该运行这个类的main方法来启动SpringBoot应用；</p><p>点进SpringBootApplication 我们会发现他是个组合配置类如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="meta">@Inherited</span> </span><br><span class="line"><span class="meta">@SpringBootConfiguration</span> </span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span> </span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;       </span><br><span class="line">    <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),      </span></span><br><span class="line"><span class="class">    @<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;) </span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="SpringBootConﬁguration"><a href="#SpringBootConﬁguration" class="headerlink" title="@SpringBootConﬁguration"></a>@SpringBootConﬁguration</h2><p>什么是配置类，以前我们在xml配置一些东西，在springboot上换成配置类来配置了<br>如下是SpringBootApplication 的配置类注解</p><p><strong>@SpringBootConﬁguration</strong>:Spring Boot的配置类；（标注在某个类上，表示这是一个Spring Boot的配置类）<br>点进<strong>@SpringBootConﬁguration</strong> 会发现注解<strong>@Conﬁguration</strong>注解<br><strong>@Conﬁguration</strong>是spring里面的原生 <strong>配置类</strong>注解  有这个注解表明这是一个配置类<br><strong>@SpringBootConﬁguration</strong> 是springboot的 <strong>配置类</strong>注解 有这个注解表明这是一个配置类</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>现在springboot把配置文件换成配置类不再需要xml复杂配置只需要加上这个注解 <strong>@SpringBootConﬁguration</strong><br><strong>@SpringBootConﬁguration</strong>的基础是 <strong>@Conﬁguration</strong>  如果再点进 <strong>@Conﬁguration</strong> 你会发现<br><strong>@Component</strong> 注解 表示容器的组件，由此可以发现配置类也是一个组件 </p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a><strong>@EnableAutoConfiguration</strong></h2><p><strong>SpringBootApplication</strong>里面还有 <strong>@EnableAutoConfiguration</strong><br><strong>@EnableAutoConfiguration</strong>：开启自动配置功能<br><strong>以前我们需要配置的东西（包扫描等），<font color="#DC143C">Spring Boot帮我们自动配置的一些东西，我们开启自动配置就好</font>；@EnableAutoConfiguration告诉SpringBoot开启自<br>动配置功能；这样自动配置才能生效；</strong></p><h2 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="*@AutoConfigurationPackage *"></a>*<em>@AutoConfigurationPackage *</em></h2><p>点进 <strong>@EnableAutoConfiguration</strong>里面我们会看见下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>@AutoConfigurationPackage ：自动配置包</p><p>#后面待更新</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开通博客的第一天</title>
      <link href="/2019/11/14/hello-world/"/>
      <url>/2019/11/14/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="开通博客的第一天"><a href="#开通博客的第一天" class="headerlink" title="开通博客的第一天"></a>开通博客的第一天</h2><blockquote><p>首先！ 感谢我师傅，帮我指导错误，帮我搭建这个博客 ，受到师傅的启发，搭建博客记录一些技术上的东西，俗话说：好记性不如烂笔头</p></blockquote><h3 id="以后更新的内容"><a href="#以后更新的内容" class="headerlink" title="以后更新的内容"></a>以后更新的内容</h3><blockquote><p>技术上以后会更新一些Java相关的技术，也会记录一些遇到的问题，做到自我反省，<br>先从基础的Java一些源码分析，慢慢的更新到框架，和微服务，数据库等…从小白做起,一步一个脚印</p></blockquote><h3 id="受到的启发"><a href="#受到的启发" class="headerlink" title="受到的启发"></a>受到的启发</h3><blockquote><p>因为天天看师傅，在更新博客也写的很详细，以后要像师傅靠齐，以前最早接触的博客大神是，纯洁的微笑<br>  他的博客也写的很好，所以想自己也创建一个</p></blockquote><h3 id="努力的放向"><a href="#努力的放向" class="headerlink" title="努力的放向"></a>努力的放向</h3><blockquote><p>以后会朝着师傅的脚印前进，心里面老想着，为什么和师傅同样是21岁，他已经月入过万了，我才是他一点零头，后面看<br>师傅技术，从后台写到前台，从单体项目写到聚合项目，现在在朝着微服务进发，各种vue shell  语法都会，是我见过最<br>厉害的了，一个人撑起一家公司，所以我学习的东西还有很多</p></blockquote><h3 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h3><blockquote><p>在我友链里面有我师傅的博客，他确实很强，可以看看文章，互相学习</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
